* Algorithms in C, Robert Sedgewick - Notes, Memos, and Coursework for Chapter 1

** Section 1.1 
*** Reflections and Definitions:  
"The term algorithm is used in computer science to describe a 
problem-solving method suitable for implementation as a computer
program." (Sedgewick, 4)

"Most algorithms of interest involve methods of organizing the data
involved in the computation. Objects created this way are called 
data structures, and they are central objects of study in computer
science." (Sedgewick, 4) 

→ Important to note, that simple algos can give rise to complex data
structures and conversely complex algos can use simple data structures 
(Sedgewick, 4) 
→ Optimizing hardware net benefit < Optimizing your algorithm net benefit
(Sedgewick, 5) 
→ You don't need to overoptimize. Do so if your algorithm needs to 
handle at scale. (Sedgewick, 6) 
→ The branch of CS that compromises the sophisticated mathematical 
analysis of algorithms is Analysis Of Algorithms

** Section 1.2 
*** Critical Thinking: 
⇒  Connectivity Problem
• Find the set containing a given item
• Replace the sets containing two given items by their union
In other words, 
If the memebers of the pair are in the same set, we move on to the next
pair; if they are not, we do a union operationand write out the pair. 

*** Exercises: 
1.1 Give the output that a connectivity algorithm should produce when 
given the input 0-2, 1-4, 2-5, 3-6, 0-4, 6-0, and 1-3. 

1.2 List all the different ways to connect two different objects for 
the example in Figure 1.1. 

1.3 Describe a simple method for counting the number of sets remaining
after using the union and find operations to solve the connectivity 
problem as described in the text. 

**** Answers: 
1.1: [0-1-2-3-4-5-6]
1.2:
/* A tree structure where each set has a key int, with a value holding */
/* all it's connections: */
[[0, [2,4,6]], [1, [3,4]], [2, [0,5]], [3, [1,6]], [4, [0,1]], 
[5, 2], [6, [0, 3]]] 
/* You could flatten it's depth by: */
[[0,2,4,6], [1,3,4], [2,0,5], [3,1,6], [4,0,1]]
1.3: TODO: Not sure.. 

** Section 1.3 
*** Algorithm notes: 
**** 1.3-quick-solution: 
→ Note that N is a compile-time constant, but you could take it from the input
 and allocate the id array dynamically (Sedgewick, 12) 
→ In this implementation p and q are connected if and only if the pth and qth 
array entries are equal. (Sedgewick, 12)

• Property: The quick-find algorithm executes at least M N instructions to solve
a connectivity problem with N objects that involves M union operations. 
(Sedgewick, 13)
• For each of the M union operations, we iterate the for loop N times. Each 
iteration requires at least one instruction (if only to check whether the loop
is finished). (Sedgewick, 13) 

→ This cost isn't noticiable if M and N are small... but if processing millions and
billions of objects, it becomes an issue.
***** figures 1.4 and 1.5 
→ "The connected components depicted in Figure 1.5 are called trees; they are 
fundemental combinatorial structures that we shall encounter on numerous
occasions..." (Sedgewick, 14) 
→ [continuing about figure 1.5's trees] are useful because they are quick to build
 and have the property that two objects are connected in the tree if and only if 
the objects are connected in the input. Each tree has precisely one object which 
points to itself (the root). When we start any object in the tree, move the object
 to which it points, then move to the object to which that object points... etc
 – always leading back to the root. 

• We can prove this property to be true by induction: 
"It is true after the array is initialized to have every object point to itself,
and if it is true before a given union operation, it is certainly true afterward."
(Sedgewick, 14) 

**** 1.3-quick-union:
→ This quick union algo would seem to be faster than the quick-find algo, because
it does not have to go through the entire array for each input pair.. but how much 
faster? 
→ It's an improvment because it removes the liability from the previous that the 
program required at least M N instructions to process M union operations among 
N objects 
→  However, is not guarenteed to be faster.

• Property: For M > N, the quick-union algorithm could take more than M N/2
instructions to solve a connectivity problem with M pairs of N objects. 

→ Suppose the input pairs come in 1-2, 2-3, 3-4... etc. After N - 1 such pairs, 
we have N objects all in the same set, and the tree that is formed by the 
quick-union algorithm is a straight line, with N pointing to N - 1, which points
to N - 2, which points to N - 3, etc (Sedgewick, 16) Thus the averge number of
pairs is: 

(0 + 1 + ... + (N - 1))/N = (N - 1)/2 

